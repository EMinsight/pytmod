
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/plot_slab_field.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_plot_slab_field.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_plot_slab_field.py:


Electric field in a time-modulated slab
===============================================

Calculate the field in response to an incident plane wave.

.. GENERATED FROM PYTHON SOURCE LINES 19-20

First import the packages

.. GENERATED FROM PYTHON SOURCE LINES 20-31

.. code-block:: Python



    import matplotlib.pyplot as plt
    import matplotlib.animation as animation
    import pytmod as pm
    import numpy as bk

    plt.ion()
    plt.close("all")



.. GENERATED FROM PYTHON SOURCE LINES 32-33

Define the parameters

.. GENERATED FROM PYTHON SOURCE LINES 33-52

.. code-block:: Python


    eps0 = 5.25
    deps = 2
    Omega = 1
    Npad = 7
    Ei0 = 1
    L = 5

    omega = 1.0 * Omega + 1e-12

    eps_fourier = [
        -deps / (2 * 1j),
        eps0,
        deps / (2 * 1j),
    ]

    # eps_fourier = [eps0]



.. GENERATED FROM PYTHON SOURCE LINES 53-54

Solve material eigenproblem

.. GENERATED FROM PYTHON SOURCE LINES 54-60

.. code-block:: Python


    mat = pm.Material(eps_fourier, Omega, Npad)
    kns, ens = mat.eigensolve(omega)
    slab = pm.Slab(mat, L)



.. GENERATED FROM PYTHON SOURCE LINES 61-62

Build the matrix for the slab

.. GENERATED FROM PYTHON SOURCE LINES 62-65

.. code-block:: Python


    matrix_slab = slab.build_matrix(omega, kns, ens)


.. GENERATED FROM PYTHON SOURCE LINES 66-67

Build the rhs for the slab

.. GENERATED FROM PYTHON SOURCE LINES 67-73

.. code-block:: Python


    Eis = slab.init_incident_field(omega)
    Ninc = mat.Nh
    Eis[Ninc] = Ei0
    rhs_slab = slab.build_rhs(omega, Eis)


.. GENERATED FROM PYTHON SOURCE LINES 74-75

Solve slab problem

.. GENERATED FROM PYTHON SOURCE LINES 75-78

.. code-block:: Python


    solution = slab.solve(matrix_slab, rhs_slab)


.. GENERATED FROM PYTHON SOURCE LINES 79-80

Extract field coefficients

.. GENERATED FROM PYTHON SOURCE LINES 80-83

.. code-block:: Python

    Eslab_plus, Eslab_minus, Er, Et = slab.extract_coefficients(solution, Eis, kns, ens)



.. GENERATED FROM PYTHON SOURCE LINES 84-85

Extract reflection and transmission coefficients

.. GENERATED FROM PYTHON SOURCE LINES 85-103

.. code-block:: Python


    rn = Er / Ei0
    tn = Et / Ei0


    import pandas as pd

    pd.set_option("display.float_format", lambda x: f"{x:.4e}")

    Rn = bk.abs(rn) ** 2
    Tn = bk.abs(tn) ** 2

    df = pd.DataFrame(
        data={"r_n": rn, "t_n": tn, "R_n": Rn, "T_n": Tn}, index=range(-mat.Nh, mat.Nh + 1)
    )
    # df.index.name = "n"
    df


.. GENERATED FROM PYTHON SOURCE LINES 104-105

Total reflection and transmission coefficients

.. GENERATED FROM PYTHON SOURCE LINES 105-116

.. code-block:: Python


    R = bk.sum(Rn)
    T = bk.sum(Tn)

    df_sum = pd.DataFrame(data={"R": R, "T": T, "Balance": R + T}, index=[""])
    df_sum


    print(df)
    print(df_sum)


.. GENERATED FROM PYTHON SOURCE LINES 117-118

Get the field

.. GENERATED FROM PYTHON SOURCE LINES 118-129

.. code-block:: Python


    T0 = 2 * bk.pi / omega
    T = mat.modulation_period
    t = bk.linspace(0, 3 * T, 300)
    Lhom = 3 * L
    x = bk.linspace(-Lhom, Lhom + L, 1000)
    psi = Eslab_plus, Eslab_minus, Er, Et
    Es = slab.get_scattered_field(x, t, omega, psi, kns, ens)
    Einc = slab.get_incident_field(x, t, omega, Eis)
    E = Einc + Es


.. GENERATED FROM PYTHON SOURCE LINES 130-131

Animate the field

.. GENERATED FROM PYTHON SOURCE LINES 131-141

.. code-block:: Python


    fig, ax = plt.subplots()
    ax.set_title(rf"$\omega = {omega/Omega}\,\Omega$")
    anim = slab.animate_field(x, t, E, (fig, ax))

    # writer = animation.PillowWriter(fps=15,
    #                                 metadata=dict(artist='pytmod'),
    #                                 bitrate=1800)
    # anim.save('field.gif', writer=writer)


.. GENERATED FROM PYTHON SOURCE LINES 142-143

Space time map

.. GENERATED FROM PYTHON SOURCE LINES 143-159

.. code-block:: Python


    plt.figure()
    plt.pcolormesh(x / L - 0.5, t / T, bk.real(E.T), cmap="RdBu_r")
    plt.axvline(-0.5, color="#949494", lw=1)
    plt.axvline(0.5, color="#949494", lw=1)
    # for i in range(5):
    #     plt.axhline(i, color="#949494", lw=1, ls=":")
    #     plt.axhline(i * T0 / T, color="#949494", lw=1, ls="--")

    plt.ylim(0, t[-1] / T)
    plt.xlabel("$x/L$")
    plt.ylabel("$t/T$")
    cb = plt.colorbar()
    cb.ax.set_title("Re $E$")
    plt.tight_layout()
    plt.show()

**Estimated memory usage:**  0 MB


.. _sphx_glr_download_examples_plot_slab_field.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_slab_field.ipynb <plot_slab_field.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_slab_field.py <plot_slab_field.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_slab_field.zip <plot_slab_field.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
