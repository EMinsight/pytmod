
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/plot_material.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_plot_material.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_plot_material.py:


Time modulated material
=======================

We will learn how to build a time modulated material and how to calculate the
eigenvalues and eigenvectors of this material.

.. GENERATED FROM PYTHON SOURCE LINES 20-21

Check results from :cite:t:`zurita-sanchez2009`

.. GENERATED FROM PYTHON SOURCE LINES 21-32

.. code-block:: Python



    import matplotlib as mpl
    import matplotlib.pyplot as plt
    import pytmod as pm
    import numpy as bk

    plt.ion()
    plt.close("all")



.. GENERATED FROM PYTHON SOURCE LINES 33-34

We define the modulation as :math:`\epsilon = \epsilon_0 + \Delta\epsilon \sin(\Omega t)`

.. GENERATED FROM PYTHON SOURCE LINES 34-61

.. code-block:: Python


    Omega = 1
    eps0 = 5.25
    deps = 4


    eps_fourier = [
        -deps / (2 * 1j),
        eps0,
        deps / (2 * 1j),
    ]

    mat = pm.Material(eps_fourier, Omega)

    T = mat.modulation_period

    t = bk.linspace(0, 3 * T, 3000)
    eps_time = mat.get_eps_time(t)

    plt.figure()
    plt.plot(t / T, eps_time.real, c="#c24c4c")
    plt.xlabel(r"$t/T$")
    plt.ylabel(r"Re $\epsilon(t)$")
    plt.xlim(0, 3)
    plt.show()



.. GENERATED FROM PYTHON SOURCE LINES 62-63

Compute the eigenvalues and eigenvectors of the material

.. GENERATED FROM PYTHON SOURCE LINES 63-67

.. code-block:: Python


    omega = 0.8
    kns, ens = mat.eigensolve(omega)


.. GENERATED FROM PYTHON SOURCE LINES 68-69

The eigenvalues are

.. GENERATED FROM PYTHON SOURCE LINES 69-72

.. code-block:: Python


    print(kns.real)


.. GENERATED FROM PYTHON SOURCE LINES 73-74

We plot the eigenmodes in the time domain

.. GENERATED FROM PYTHON SOURCE LINES 74-88

.. code-block:: Python


    plt.figure()
    for i in range(len(kns)):
        kn = kns[i].real
        mode = ens[i]
        mode_time = mat.freq2time(mode, t)
        plt.plot(t / T, mode_time.real, label=i)
        plt.xlabel(r"$t/T$")
        plt.ylabel(r"Re $e_n(t)$")
        plt.xlim(0, 3)
        plt.legend()
        plt.show()



.. GENERATED FROM PYTHON SOURCE LINES 89-90

Lets's study the convergence with respect to the truncation of the Fourier series

.. GENERATED FROM PYTHON SOURCE LINES 90-112

.. code-block:: Python


    Nmax = 15
    Npads = range(Nmax)
    ev_cv = []
    en_cv = []
    for Npad in Npads:
        mat = pm.Material(eps_fourier, Omega, Npad=Npad)
        kns, ens = mat.eigensolve(omega)
        idx = bk.argsort(kns)
        kns = kns[idx]
        ens = ens[:, idx]

        ev_cv.append(kns[:3].real)
        modes_time = []
        for i in range(3):
            mode = ens[:, i]
            mode_time = mat.freq2time(mode, t)
            modes_time.append(mode_time)
        en_cv.append(modes_time)
    ev_cv = bk.array(ev_cv)
    en_cv = bk.array(en_cv)


.. GENERATED FROM PYTHON SOURCE LINES 113-114

Eigenvalues convergence

.. GENERATED FROM PYTHON SOURCE LINES 114-129

.. code-block:: Python



    Ns = 3 + 2 * bk.array(Npads)


    plt.figure()
    for i in range(3):
        plt.plot(Ns, ev_cv[:, i], label=i)
    plt.xlabel("$N$")
    plt.ylabel("eigenvalue")
    plt.legend()
    plt.show()




.. GENERATED FROM PYTHON SOURCE LINES 130-131

Relative error

.. GENERATED FROM PYTHON SOURCE LINES 131-163

.. code-block:: Python


    mat = pm.Material(eps_fourier, Omega, Npad=100)
    kns, ens = mat.eigensolve(omega)
    idx = bk.argsort(kns)
    kns = kns[idx]
    ens = ens[:, idx]
    evs_check = kns[:3].real
    ens_check = ens[::3].real



    plt.figure()
    for i in range(3):
        plt.plot(Ns, bk.abs(1 - ev_cv[:, i] / evs_check[i]), label=i)
        plt.yscale("log")
        plt.tight_layout()
        plt.show()


    # _x = bk.linspace(3, 2*Nmax+1, 100)
    # plt.plot(_x, bk.exp(-_x), "--k")
    plt.xlabel("$N$")
    plt.ylabel("relative error")
    plt.xlim(3, 21)
    xticks = bk.arange(3, 2*Nmax+2, 2)
    plt.xticks(xticks, xticks)
    plt.legend()
    plt.tight_layout()
    plt.show()




.. GENERATED FROM PYTHON SOURCE LINES 164-165

Eigenstates convergence

.. GENERATED FROM PYTHON SOURCE LINES 165-181

.. code-block:: Python


    cmap = mpl.colormaps["Blues"]
    colors = cmap(bk.linspace(0, 1, 11)[1:])

    for i in range(3):
        plt.figure()
        plt.title(i)
        for j in range(10):
            plt.plot(t/T, en_cv[j, i].T.real, c=colors[j])
            plt.pause(0.01)
        plt.xlim(0, 3)
        plt.xlabel("$t/T$")
        plt.ylabel("mode")
        plt.tight_layout()
        plt.show()


**Estimated memory usage:**  0 MB


.. _sphx_glr_download_examples_plot_material.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_material.ipynb <plot_material.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_material.py <plot_material.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_material.zip <plot_material.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
